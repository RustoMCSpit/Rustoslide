schema {
  query: query_root
  subscription: subscription_root
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached(
    "refresh the cache entry"
    refresh: Boolean! = false,
    "measured in seconds"
    ttl: Int! = 60
  ) on QUERY

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

"just a helper table for functions to get data for the graphs"
type count_by_date {
  count: float8!
  date: date!
}

"just a placeholder table for the hosting report function"
type hosting_report_t {
  actives: Int!
  count: Int!
  country: String!
  total: Int!
}

type hosting_report_t_aggregate {
  aggregate: hosting_report_t_aggregate_fields
  nodes: [hosting_report_t!]!
}

"aggregate fields of \"hosting_report_t\""
type hosting_report_t_aggregate_fields {
  avg: hosting_report_t_avg_fields
  count(columns: [hosting_report_t_select_column!], distinct: Boolean): Int!
  max: hosting_report_t_max_fields
  min: hosting_report_t_min_fields
  stddev: hosting_report_t_stddev_fields
  stddev_pop: hosting_report_t_stddev_pop_fields
  stddev_samp: hosting_report_t_stddev_samp_fields
  sum: hosting_report_t_sum_fields
  var_pop: hosting_report_t_var_pop_fields
  var_samp: hosting_report_t_var_samp_fields
  variance: hosting_report_t_variance_fields
}

"aggregate avg on columns"
type hosting_report_t_avg_fields {
  actives: Float
  count: Float
  total: Float
}

"aggregate max on columns"
type hosting_report_t_max_fields {
  actives: Int
  count: Int
  country: String
  total: Int
}

"aggregate min on columns"
type hosting_report_t_min_fields {
  actives: Int
  count: Int
  country: String
  total: Int
}

"aggregate stddev on columns"
type hosting_report_t_stddev_fields {
  actives: Float
  count: Float
  total: Float
}

"aggregate stddev_pop on columns"
type hosting_report_t_stddev_pop_fields {
  actives: Float
  count: Float
  total: Float
}

"aggregate stddev_samp on columns"
type hosting_report_t_stddev_samp_fields {
  actives: Float
  count: Float
  total: Float
}

"aggregate sum on columns"
type hosting_report_t_sum_fields {
  actives: Int
  count: Int
  total: Int
}

"aggregate var_pop on columns"
type hosting_report_t_var_pop_fields {
  actives: Float
  count: Float
  total: Float
}

"aggregate var_samp on columns"
type hosting_report_t_var_samp_fields {
  actives: Float
  count: Float
  total: Float
}

"aggregate variance on columns"
type hosting_report_t_variance_fields {
  actives: Float
  count: Float
  total: Float
}

type query_root {
  "execute function \"active_users_ratio\" which returns \"count_by_date\""
  active_users_ratio(
    "distinct select on columns"
    distinct_on: [count_by_date_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [count_by_date_order_by!],
    "filter the rows returned"
    where: count_by_date_bool_exp
  ): [count_by_date!]!
  "execute function \"active_users_ratio_by_node\" which returns \"count_by_date\""
  active_users_ratio_by_node(
    "input parameters for function \"active_users_ratio_by_node\""
    args: active_users_ratio_by_node_args!,
    "distinct select on columns"
    distinct_on: [count_by_date_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [count_by_date_order_by!],
    "filter the rows returned"
    where: count_by_date_bool_exp
  ): [count_by_date!]!
  "execute function \"active_users_ratio_by_platform\" which returns \"count_by_date\""
  active_users_ratio_by_platform(
    "input parameters for function \"active_users_ratio_by_platform\""
    args: active_users_ratio_by_platform_args!,
    "distinct select on columns"
    distinct_on: [count_by_date_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [count_by_date_order_by!],
    "filter the rows returned"
    where: count_by_date_bool_exp
  ): [count_by_date!]!
  "fetch data from the table: \"count_by_date\""
  count_by_date(
    "distinct select on columns"
    distinct_on: [count_by_date_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [count_by_date_order_by!],
    "filter the rows returned"
    where: count_by_date_bool_exp
  ): [count_by_date!]!
  "fetch data from the table: \"count_by_date\" using primary key columns"
  count_by_date_by_pk(date: date!): count_by_date
  "execute function \"hosting_report\" which returns \"hosting_report_t\""
  hosting_report(
    "distinct select on columns"
    distinct_on: [hosting_report_t_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [hosting_report_t_order_by!],
    "filter the rows returned"
    where: hosting_report_t_bool_exp
  ): [hosting_report_t!]!
  "execute function \"hosting_report\" and query aggregates on result of table type \"hosting_report_t\""
  hosting_report_aggregate(
    "distinct select on columns"
    distinct_on: [hosting_report_t_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [hosting_report_t_order_by!],
    "filter the rows returned"
    where: hosting_report_t_bool_exp
  ): hosting_report_t_aggregate!
  "fetch data from the table: \"hosting_report_t\""
  hosting_report_t(
    "distinct select on columns"
    distinct_on: [hosting_report_t_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [hosting_report_t_order_by!],
    "filter the rows returned"
    where: hosting_report_t_bool_exp
  ): [hosting_report_t!]!
  "fetch aggregated fields from the table: \"hosting_report_t\""
  hosting_report_t_aggregate(
    "distinct select on columns"
    distinct_on: [hosting_report_t_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [hosting_report_t_order_by!],
    "filter the rows returned"
    where: hosting_report_t_bool_exp
  ): hosting_report_t_aggregate!
  "fetch data from the table: \"hosting_report_t\" using primary key columns"
  hosting_report_t_by_pk(country: String!): hosting_report_t
  "execute function \"node_count_per_date\" which returns \"count_by_date\""
  node_count_per_date(
    "distinct select on columns"
    distinct_on: [count_by_date_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [count_by_date_order_by!],
    "filter the rows returned"
    where: count_by_date_bool_exp
  ): [count_by_date!]!
  "execute function \"node_count_per_date_by_platform_id\" which returns \"count_by_date\""
  node_count_per_date_by_platform_id(
    "input parameters for function \"node_count_per_date_by_platform_id\""
    args: node_count_per_date_by_platform_id_args!,
    "distinct select on columns"
    distinct_on: [count_by_date_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [count_by_date_order_by!],
    "filter the rows returned"
    where: count_by_date_bool_exp
  ): [count_by_date!]!
  "fetch data from the table: \"thefederation_node\""
  thefederation_node(
    "distinct select on columns"
    distinct_on: [thefederation_node_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_node_order_by!],
    "filter the rows returned"
    where: thefederation_node_bool_exp
  ): [thefederation_node!]!
  "fetch aggregated fields from the table: \"thefederation_node\""
  thefederation_node_aggregate(
    "distinct select on columns"
    distinct_on: [thefederation_node_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_node_order_by!],
    "filter the rows returned"
    where: thefederation_node_bool_exp
  ): thefederation_node_aggregate!
  "fetch data from the table: \"thefederation_node\" using primary key columns"
  thefederation_node_by_pk(id: Int!): thefederation_node
  "An array relationship"
  thefederation_node_protocols(
    "distinct select on columns"
    distinct_on: [thefederation_node_protocols_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_node_protocols_order_by!],
    "filter the rows returned"
    where: thefederation_node_protocols_bool_exp
  ): [thefederation_node_protocols!]!
  "An aggregate relationship"
  thefederation_node_protocols_aggregate(
    "distinct select on columns"
    distinct_on: [thefederation_node_protocols_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_node_protocols_order_by!],
    "filter the rows returned"
    where: thefederation_node_protocols_bool_exp
  ): thefederation_node_protocols_aggregate!
  "An array relationship"
  thefederation_node_services(
    "distinct select on columns"
    distinct_on: [thefederation_node_services_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_node_services_order_by!],
    "filter the rows returned"
    where: thefederation_node_services_bool_exp
  ): [thefederation_node_services!]!
  "An aggregate relationship"
  thefederation_node_services_aggregate(
    "distinct select on columns"
    distinct_on: [thefederation_node_services_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_node_services_order_by!],
    "filter the rows returned"
    where: thefederation_node_services_bool_exp
  ): thefederation_node_services_aggregate!
  "fetch data from the table: \"thefederation_platform\""
  thefederation_platform(
    "distinct select on columns"
    distinct_on: [thefederation_platform_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_platform_order_by!],
    "filter the rows returned"
    where: thefederation_platform_bool_exp
  ): [thefederation_platform!]!
  "fetch aggregated fields from the table: \"thefederation_platform\""
  thefederation_platform_aggregate(
    "distinct select on columns"
    distinct_on: [thefederation_platform_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_platform_order_by!],
    "filter the rows returned"
    where: thefederation_platform_bool_exp
  ): thefederation_platform_aggregate!
  "fetch data from the table: \"thefederation_platform\" using primary key columns"
  thefederation_platform_by_pk(id: Int!): thefederation_platform
  "fetch data from the table: \"thefederation_protocol\""
  thefederation_protocol(
    "distinct select on columns"
    distinct_on: [thefederation_protocol_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_protocol_order_by!],
    "filter the rows returned"
    where: thefederation_protocol_bool_exp
  ): [thefederation_protocol!]!
  "fetch aggregated fields from the table: \"thefederation_protocol\""
  thefederation_protocol_aggregate(
    "distinct select on columns"
    distinct_on: [thefederation_protocol_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_protocol_order_by!],
    "filter the rows returned"
    where: thefederation_protocol_bool_exp
  ): thefederation_protocol_aggregate!
  "fetch data from the table: \"thefederation_protocol\" using primary key columns"
  thefederation_protocol_by_pk(id: Int!): thefederation_protocol
  "fetch data from the table: \"thefederation_service\""
  thefederation_service(
    "distinct select on columns"
    distinct_on: [thefederation_service_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_service_order_by!],
    "filter the rows returned"
    where: thefederation_service_bool_exp
  ): [thefederation_service!]!
  "fetch aggregated fields from the table: \"thefederation_service\""
  thefederation_service_aggregate(
    "distinct select on columns"
    distinct_on: [thefederation_service_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_service_order_by!],
    "filter the rows returned"
    where: thefederation_service_bool_exp
  ): thefederation_service_aggregate!
  "fetch data from the table: \"thefederation_stat\""
  thefederation_stat(
    "distinct select on columns"
    distinct_on: [thefederation_stat_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_stat_order_by!],
    "filter the rows returned"
    where: thefederation_stat_bool_exp
  ): [thefederation_stat!]!
  "fetch aggregated fields from the table: \"thefederation_stat\""
  thefederation_stat_aggregate(
    "distinct select on columns"
    distinct_on: [thefederation_stat_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_stat_order_by!],
    "filter the rows returned"
    where: thefederation_stat_bool_exp
  ): thefederation_stat_aggregate!
  "fetch data from the table: \"thefederation_stat\" using primary key columns"
  thefederation_stat_by_pk(id: Int!): thefederation_stat
  "execute function \"users_per_node\" which returns \"count_by_date\""
  users_per_node(
    "distinct select on columns"
    distinct_on: [count_by_date_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [count_by_date_order_by!],
    "filter the rows returned"
    where: count_by_date_bool_exp
  ): [count_by_date!]!
  "execute function \"users_per_node_by_platform\" which returns \"count_by_date\""
  users_per_node_by_platform(
    "input parameters for function \"users_per_node_by_platform\""
    args: users_per_node_by_platform_args!,
    "distinct select on columns"
    distinct_on: [count_by_date_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [count_by_date_order_by!],
    "filter the rows returned"
    where: count_by_date_bool_exp
  ): [count_by_date!]!
}

type subscription_root {
  "execute function \"active_users_ratio\" which returns \"count_by_date\""
  active_users_ratio(
    "distinct select on columns"
    distinct_on: [count_by_date_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [count_by_date_order_by!],
    "filter the rows returned"
    where: count_by_date_bool_exp
  ): [count_by_date!]!
  "execute function \"active_users_ratio_by_node\" which returns \"count_by_date\""
  active_users_ratio_by_node(
    "input parameters for function \"active_users_ratio_by_node\""
    args: active_users_ratio_by_node_args!,
    "distinct select on columns"
    distinct_on: [count_by_date_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [count_by_date_order_by!],
    "filter the rows returned"
    where: count_by_date_bool_exp
  ): [count_by_date!]!
  "execute function \"active_users_ratio_by_platform\" which returns \"count_by_date\""
  active_users_ratio_by_platform(
    "input parameters for function \"active_users_ratio_by_platform\""
    args: active_users_ratio_by_platform_args!,
    "distinct select on columns"
    distinct_on: [count_by_date_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [count_by_date_order_by!],
    "filter the rows returned"
    where: count_by_date_bool_exp
  ): [count_by_date!]!
  "fetch data from the table: \"count_by_date\""
  count_by_date(
    "distinct select on columns"
    distinct_on: [count_by_date_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [count_by_date_order_by!],
    "filter the rows returned"
    where: count_by_date_bool_exp
  ): [count_by_date!]!
  "fetch data from the table: \"count_by_date\" using primary key columns"
  count_by_date_by_pk(date: date!): count_by_date
  "fetch data from the table in a streaming manner: \"count_by_date\""
  count_by_date_stream(
    "maximum number of rows returned in a single batch"
    batch_size: Int!,
    "cursor to stream the results returned by the query"
    cursor: [count_by_date_stream_cursor_input]!,
    "filter the rows returned"
    where: count_by_date_bool_exp
  ): [count_by_date!]!
  "execute function \"hosting_report\" which returns \"hosting_report_t\""
  hosting_report(
    "distinct select on columns"
    distinct_on: [hosting_report_t_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [hosting_report_t_order_by!],
    "filter the rows returned"
    where: hosting_report_t_bool_exp
  ): [hosting_report_t!]!
  "execute function \"hosting_report\" and query aggregates on result of table type \"hosting_report_t\""
  hosting_report_aggregate(
    "distinct select on columns"
    distinct_on: [hosting_report_t_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [hosting_report_t_order_by!],
    "filter the rows returned"
    where: hosting_report_t_bool_exp
  ): hosting_report_t_aggregate!
  "fetch data from the table: \"hosting_report_t\""
  hosting_report_t(
    "distinct select on columns"
    distinct_on: [hosting_report_t_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [hosting_report_t_order_by!],
    "filter the rows returned"
    where: hosting_report_t_bool_exp
  ): [hosting_report_t!]!
  "fetch aggregated fields from the table: \"hosting_report_t\""
  hosting_report_t_aggregate(
    "distinct select on columns"
    distinct_on: [hosting_report_t_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [hosting_report_t_order_by!],
    "filter the rows returned"
    where: hosting_report_t_bool_exp
  ): hosting_report_t_aggregate!
  "fetch data from the table: \"hosting_report_t\" using primary key columns"
  hosting_report_t_by_pk(country: String!): hosting_report_t
  "fetch data from the table in a streaming manner: \"hosting_report_t\""
  hosting_report_t_stream(
    "maximum number of rows returned in a single batch"
    batch_size: Int!,
    "cursor to stream the results returned by the query"
    cursor: [hosting_report_t_stream_cursor_input]!,
    "filter the rows returned"
    where: hosting_report_t_bool_exp
  ): [hosting_report_t!]!
  "execute function \"node_count_per_date\" which returns \"count_by_date\""
  node_count_per_date(
    "distinct select on columns"
    distinct_on: [count_by_date_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [count_by_date_order_by!],
    "filter the rows returned"
    where: count_by_date_bool_exp
  ): [count_by_date!]!
  "execute function \"node_count_per_date_by_platform_id\" which returns \"count_by_date\""
  node_count_per_date_by_platform_id(
    "input parameters for function \"node_count_per_date_by_platform_id\""
    args: node_count_per_date_by_platform_id_args!,
    "distinct select on columns"
    distinct_on: [count_by_date_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [count_by_date_order_by!],
    "filter the rows returned"
    where: count_by_date_bool_exp
  ): [count_by_date!]!
  "fetch data from the table: \"thefederation_node\""
  thefederation_node(
    "distinct select on columns"
    distinct_on: [thefederation_node_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_node_order_by!],
    "filter the rows returned"
    where: thefederation_node_bool_exp
  ): [thefederation_node!]!
  "fetch aggregated fields from the table: \"thefederation_node\""
  thefederation_node_aggregate(
    "distinct select on columns"
    distinct_on: [thefederation_node_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_node_order_by!],
    "filter the rows returned"
    where: thefederation_node_bool_exp
  ): thefederation_node_aggregate!
  "fetch data from the table: \"thefederation_node\" using primary key columns"
  thefederation_node_by_pk(id: Int!): thefederation_node
  "An array relationship"
  thefederation_node_protocols(
    "distinct select on columns"
    distinct_on: [thefederation_node_protocols_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_node_protocols_order_by!],
    "filter the rows returned"
    where: thefederation_node_protocols_bool_exp
  ): [thefederation_node_protocols!]!
  "An aggregate relationship"
  thefederation_node_protocols_aggregate(
    "distinct select on columns"
    distinct_on: [thefederation_node_protocols_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_node_protocols_order_by!],
    "filter the rows returned"
    where: thefederation_node_protocols_bool_exp
  ): thefederation_node_protocols_aggregate!
  "fetch data from the table in a streaming manner: \"thefederation_node_protocols\""
  thefederation_node_protocols_stream(
    "maximum number of rows returned in a single batch"
    batch_size: Int!,
    "cursor to stream the results returned by the query"
    cursor: [thefederation_node_protocols_stream_cursor_input]!,
    "filter the rows returned"
    where: thefederation_node_protocols_bool_exp
  ): [thefederation_node_protocols!]!
  "An array relationship"
  thefederation_node_services(
    "distinct select on columns"
    distinct_on: [thefederation_node_services_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_node_services_order_by!],
    "filter the rows returned"
    where: thefederation_node_services_bool_exp
  ): [thefederation_node_services!]!
  "An aggregate relationship"
  thefederation_node_services_aggregate(
    "distinct select on columns"
    distinct_on: [thefederation_node_services_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_node_services_order_by!],
    "filter the rows returned"
    where: thefederation_node_services_bool_exp
  ): thefederation_node_services_aggregate!
  "fetch data from the table in a streaming manner: \"thefederation_node_services\""
  thefederation_node_services_stream(
    "maximum number of rows returned in a single batch"
    batch_size: Int!,
    "cursor to stream the results returned by the query"
    cursor: [thefederation_node_services_stream_cursor_input]!,
    "filter the rows returned"
    where: thefederation_node_services_bool_exp
  ): [thefederation_node_services!]!
  "fetch data from the table in a streaming manner: \"thefederation_node\""
  thefederation_node_stream(
    "maximum number of rows returned in a single batch"
    batch_size: Int!,
    "cursor to stream the results returned by the query"
    cursor: [thefederation_node_stream_cursor_input]!,
    "filter the rows returned"
    where: thefederation_node_bool_exp
  ): [thefederation_node!]!
  "fetch data from the table: \"thefederation_platform\""
  thefederation_platform(
    "distinct select on columns"
    distinct_on: [thefederation_platform_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_platform_order_by!],
    "filter the rows returned"
    where: thefederation_platform_bool_exp
  ): [thefederation_platform!]!
  "fetch aggregated fields from the table: \"thefederation_platform\""
  thefederation_platform_aggregate(
    "distinct select on columns"
    distinct_on: [thefederation_platform_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_platform_order_by!],
    "filter the rows returned"
    where: thefederation_platform_bool_exp
  ): thefederation_platform_aggregate!
  "fetch data from the table: \"thefederation_platform\" using primary key columns"
  thefederation_platform_by_pk(id: Int!): thefederation_platform
  "fetch data from the table in a streaming manner: \"thefederation_platform\""
  thefederation_platform_stream(
    "maximum number of rows returned in a single batch"
    batch_size: Int!,
    "cursor to stream the results returned by the query"
    cursor: [thefederation_platform_stream_cursor_input]!,
    "filter the rows returned"
    where: thefederation_platform_bool_exp
  ): [thefederation_platform!]!
  "fetch data from the table: \"thefederation_protocol\""
  thefederation_protocol(
    "distinct select on columns"
    distinct_on: [thefederation_protocol_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_protocol_order_by!],
    "filter the rows returned"
    where: thefederation_protocol_bool_exp
  ): [thefederation_protocol!]!
  "fetch aggregated fields from the table: \"thefederation_protocol\""
  thefederation_protocol_aggregate(
    "distinct select on columns"
    distinct_on: [thefederation_protocol_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_protocol_order_by!],
    "filter the rows returned"
    where: thefederation_protocol_bool_exp
  ): thefederation_protocol_aggregate!
  "fetch data from the table: \"thefederation_protocol\" using primary key columns"
  thefederation_protocol_by_pk(id: Int!): thefederation_protocol
  "fetch data from the table in a streaming manner: \"thefederation_protocol\""
  thefederation_protocol_stream(
    "maximum number of rows returned in a single batch"
    batch_size: Int!,
    "cursor to stream the results returned by the query"
    cursor: [thefederation_protocol_stream_cursor_input]!,
    "filter the rows returned"
    where: thefederation_protocol_bool_exp
  ): [thefederation_protocol!]!
  "fetch data from the table: \"thefederation_service\""
  thefederation_service(
    "distinct select on columns"
    distinct_on: [thefederation_service_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_service_order_by!],
    "filter the rows returned"
    where: thefederation_service_bool_exp
  ): [thefederation_service!]!
  "fetch aggregated fields from the table: \"thefederation_service\""
  thefederation_service_aggregate(
    "distinct select on columns"
    distinct_on: [thefederation_service_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_service_order_by!],
    "filter the rows returned"
    where: thefederation_service_bool_exp
  ): thefederation_service_aggregate!
  "fetch data from the table in a streaming manner: \"thefederation_service\""
  thefederation_service_stream(
    "maximum number of rows returned in a single batch"
    batch_size: Int!,
    "cursor to stream the results returned by the query"
    cursor: [thefederation_service_stream_cursor_input]!,
    "filter the rows returned"
    where: thefederation_service_bool_exp
  ): [thefederation_service!]!
  "fetch data from the table: \"thefederation_stat\""
  thefederation_stat(
    "distinct select on columns"
    distinct_on: [thefederation_stat_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_stat_order_by!],
    "filter the rows returned"
    where: thefederation_stat_bool_exp
  ): [thefederation_stat!]!
  "fetch aggregated fields from the table: \"thefederation_stat\""
  thefederation_stat_aggregate(
    "distinct select on columns"
    distinct_on: [thefederation_stat_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_stat_order_by!],
    "filter the rows returned"
    where: thefederation_stat_bool_exp
  ): thefederation_stat_aggregate!
  "fetch data from the table: \"thefederation_stat\" using primary key columns"
  thefederation_stat_by_pk(id: Int!): thefederation_stat
  "fetch data from the table in a streaming manner: \"thefederation_stat\""
  thefederation_stat_stream(
    "maximum number of rows returned in a single batch"
    batch_size: Int!,
    "cursor to stream the results returned by the query"
    cursor: [thefederation_stat_stream_cursor_input]!,
    "filter the rows returned"
    where: thefederation_stat_bool_exp
  ): [thefederation_stat!]!
  "execute function \"users_per_node\" which returns \"count_by_date\""
  users_per_node(
    "distinct select on columns"
    distinct_on: [count_by_date_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [count_by_date_order_by!],
    "filter the rows returned"
    where: count_by_date_bool_exp
  ): [count_by_date!]!
  "execute function \"users_per_node_by_platform\" which returns \"count_by_date\""
  users_per_node_by_platform(
    "input parameters for function \"users_per_node_by_platform\""
    args: users_per_node_by_platform_args!,
    "distinct select on columns"
    distinct_on: [count_by_date_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [count_by_date_order_by!],
    "filter the rows returned"
    where: count_by_date_bool_exp
  ): [count_by_date!]!
}

"columns and relationships of \"thefederation_node\""
type thefederation_node {
  blocked: Boolean!
  country: String!
  created: timestamptz!
  features(
    "JSON select path"
    path: String
  ): jsonb!
  hide_from_list: Boolean!
  host: String!
  id: Int!
  ip: inet
  last_success: timestamptz
  name: String!
  open_signups: Boolean!
  organization_account: String!
  organization_contact: String!
  organization_name: String!
  platform_id: Int!
  relay: String!
  server_meta(
    "JSON select path"
    path: String
  ): jsonb!
  "An array relationship"
  thefederation_node_services(
    "distinct select on columns"
    distinct_on: [thefederation_node_services_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_node_services_order_by!],
    "filter the rows returned"
    where: thefederation_node_services_bool_exp
  ): [thefederation_node_services!]!
  "An aggregate relationship"
  thefederation_node_services_aggregate(
    "distinct select on columns"
    distinct_on: [thefederation_node_services_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_node_services_order_by!],
    "filter the rows returned"
    where: thefederation_node_services_bool_exp
  ): thefederation_node_services_aggregate!
  "An object relationship"
  thefederation_platform: thefederation_platform!
  "An array relationship"
  thefederation_stats(
    "distinct select on columns"
    distinct_on: [thefederation_stat_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_stat_order_by!],
    "filter the rows returned"
    where: thefederation_stat_bool_exp
  ): [thefederation_stat!]!
  "An aggregate relationship"
  thefederation_stats_aggregate(
    "distinct select on columns"
    distinct_on: [thefederation_stat_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_stat_order_by!],
    "filter the rows returned"
    where: thefederation_stat_bool_exp
  ): thefederation_stat_aggregate!
  updated: timestamptz!
  uuid: uuid!
  version: String!
}

"aggregated selection of \"thefederation_node\""
type thefederation_node_aggregate {
  aggregate: thefederation_node_aggregate_fields
  nodes: [thefederation_node!]!
}

"aggregate fields of \"thefederation_node\""
type thefederation_node_aggregate_fields {
  avg: thefederation_node_avg_fields
  count(columns: [thefederation_node_select_column!], distinct: Boolean): Int!
  max: thefederation_node_max_fields
  min: thefederation_node_min_fields
  stddev: thefederation_node_stddev_fields
  stddev_pop: thefederation_node_stddev_pop_fields
  stddev_samp: thefederation_node_stddev_samp_fields
  sum: thefederation_node_sum_fields
  var_pop: thefederation_node_var_pop_fields
  var_samp: thefederation_node_var_samp_fields
  variance: thefederation_node_variance_fields
}

"aggregate avg on columns"
type thefederation_node_avg_fields {
  id: Float
  platform_id: Float
}

"aggregate max on columns"
type thefederation_node_max_fields {
  country: String
  created: timestamptz
  host: String
  id: Int
  last_success: timestamptz
  name: String
  organization_account: String
  organization_contact: String
  organization_name: String
  platform_id: Int
  relay: String
  updated: timestamptz
  uuid: uuid
  version: String
}

"aggregate min on columns"
type thefederation_node_min_fields {
  country: String
  created: timestamptz
  host: String
  id: Int
  last_success: timestamptz
  name: String
  organization_account: String
  organization_contact: String
  organization_name: String
  platform_id: Int
  relay: String
  updated: timestamptz
  uuid: uuid
  version: String
}

"columns and relationships of \"thefederation_node_protocols\""
type thefederation_node_protocols {
  node_id: Int!
  protocol_id: Int!
  "An object relationship"
  thefederation_node: thefederation_node!
}

"aggregated selection of \"thefederation_node_protocols\""
type thefederation_node_protocols_aggregate {
  aggregate: thefederation_node_protocols_aggregate_fields
  nodes: [thefederation_node_protocols!]!
}

"aggregate fields of \"thefederation_node_protocols\""
type thefederation_node_protocols_aggregate_fields {
  avg: thefederation_node_protocols_avg_fields
  count(columns: [thefederation_node_protocols_select_column!], distinct: Boolean): Int!
  max: thefederation_node_protocols_max_fields
  min: thefederation_node_protocols_min_fields
  stddev: thefederation_node_protocols_stddev_fields
  stddev_pop: thefederation_node_protocols_stddev_pop_fields
  stddev_samp: thefederation_node_protocols_stddev_samp_fields
  sum: thefederation_node_protocols_sum_fields
  var_pop: thefederation_node_protocols_var_pop_fields
  var_samp: thefederation_node_protocols_var_samp_fields
  variance: thefederation_node_protocols_variance_fields
}

"aggregate avg on columns"
type thefederation_node_protocols_avg_fields {
  node_id: Float
  protocol_id: Float
}

"aggregate max on columns"
type thefederation_node_protocols_max_fields {
  node_id: Int
  protocol_id: Int
}

"aggregate min on columns"
type thefederation_node_protocols_min_fields {
  node_id: Int
  protocol_id: Int
}

"aggregate stddev on columns"
type thefederation_node_protocols_stddev_fields {
  node_id: Float
  protocol_id: Float
}

"aggregate stddev_pop on columns"
type thefederation_node_protocols_stddev_pop_fields {
  node_id: Float
  protocol_id: Float
}

"aggregate stddev_samp on columns"
type thefederation_node_protocols_stddev_samp_fields {
  node_id: Float
  protocol_id: Float
}

"aggregate sum on columns"
type thefederation_node_protocols_sum_fields {
  node_id: Int
  protocol_id: Int
}

"aggregate var_pop on columns"
type thefederation_node_protocols_var_pop_fields {
  node_id: Float
  protocol_id: Float
}

"aggregate var_samp on columns"
type thefederation_node_protocols_var_samp_fields {
  node_id: Float
  protocol_id: Float
}

"aggregate variance on columns"
type thefederation_node_protocols_variance_fields {
  node_id: Float
  protocol_id: Float
}

"columns and relationships of \"thefederation_node_services\""
type thefederation_node_services {
  node_id: Int!
  service_id: Int!
  "An object relationship"
  thefederation_node: thefederation_node!
  "An object relationship"
  thefederation_service: thefederation_service!
}

"aggregated selection of \"thefederation_node_services\""
type thefederation_node_services_aggregate {
  aggregate: thefederation_node_services_aggregate_fields
  nodes: [thefederation_node_services!]!
}

"aggregate fields of \"thefederation_node_services\""
type thefederation_node_services_aggregate_fields {
  avg: thefederation_node_services_avg_fields
  count(columns: [thefederation_node_services_select_column!], distinct: Boolean): Int!
  max: thefederation_node_services_max_fields
  min: thefederation_node_services_min_fields
  stddev: thefederation_node_services_stddev_fields
  stddev_pop: thefederation_node_services_stddev_pop_fields
  stddev_samp: thefederation_node_services_stddev_samp_fields
  sum: thefederation_node_services_sum_fields
  var_pop: thefederation_node_services_var_pop_fields
  var_samp: thefederation_node_services_var_samp_fields
  variance: thefederation_node_services_variance_fields
}

"aggregate avg on columns"
type thefederation_node_services_avg_fields {
  node_id: Float
  service_id: Float
}

"aggregate max on columns"
type thefederation_node_services_max_fields {
  node_id: Int
  service_id: Int
}

"aggregate min on columns"
type thefederation_node_services_min_fields {
  node_id: Int
  service_id: Int
}

"aggregate stddev on columns"
type thefederation_node_services_stddev_fields {
  node_id: Float
  service_id: Float
}

"aggregate stddev_pop on columns"
type thefederation_node_services_stddev_pop_fields {
  node_id: Float
  service_id: Float
}

"aggregate stddev_samp on columns"
type thefederation_node_services_stddev_samp_fields {
  node_id: Float
  service_id: Float
}

"aggregate sum on columns"
type thefederation_node_services_sum_fields {
  node_id: Int
  service_id: Int
}

"aggregate var_pop on columns"
type thefederation_node_services_var_pop_fields {
  node_id: Float
  service_id: Float
}

"aggregate var_samp on columns"
type thefederation_node_services_var_samp_fields {
  node_id: Float
  service_id: Float
}

"aggregate variance on columns"
type thefederation_node_services_variance_fields {
  node_id: Float
  service_id: Float
}

"aggregate stddev on columns"
type thefederation_node_stddev_fields {
  id: Float
  platform_id: Float
}

"aggregate stddev_pop on columns"
type thefederation_node_stddev_pop_fields {
  id: Float
  platform_id: Float
}

"aggregate stddev_samp on columns"
type thefederation_node_stddev_samp_fields {
  id: Float
  platform_id: Float
}

"aggregate sum on columns"
type thefederation_node_sum_fields {
  id: Int
  platform_id: Int
}

"aggregate var_pop on columns"
type thefederation_node_var_pop_fields {
  id: Float
  platform_id: Float
}

"aggregate var_samp on columns"
type thefederation_node_var_samp_fields {
  id: Float
  platform_id: Float
}

"aggregate variance on columns"
type thefederation_node_variance_fields {
  id: Float
  platform_id: Float
}

"columns and relationships of \"thefederation_platform\""
type thefederation_platform {
  code: String!
  created: timestamptz!
  description: String!
  display_name: String!
  icon: String!
  id: Int!
  install_guide: String!
  latest_version: String!
  license: String!
  name: String!
  tagline: String!
  "An array relationship"
  thefederation_nodes(
    "distinct select on columns"
    distinct_on: [thefederation_node_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_node_order_by!],
    "filter the rows returned"
    where: thefederation_node_bool_exp
  ): [thefederation_node!]!
  "An aggregate relationship"
  thefederation_nodes_aggregate(
    "distinct select on columns"
    distinct_on: [thefederation_node_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_node_order_by!],
    "filter the rows returned"
    where: thefederation_node_bool_exp
  ): thefederation_node_aggregate!
  "An array relationship"
  thefederation_stats(
    "distinct select on columns"
    distinct_on: [thefederation_stat_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_stat_order_by!],
    "filter the rows returned"
    where: thefederation_stat_bool_exp
  ): [thefederation_stat!]!
  "An aggregate relationship"
  thefederation_stats_aggregate(
    "distinct select on columns"
    distinct_on: [thefederation_stat_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_stat_order_by!],
    "filter the rows returned"
    where: thefederation_stat_bool_exp
  ): thefederation_stat_aggregate!
  updated: timestamptz!
  uuid: uuid!
  version_clean_style: String!
  website: String!
}

"aggregated selection of \"thefederation_platform\""
type thefederation_platform_aggregate {
  aggregate: thefederation_platform_aggregate_fields
  nodes: [thefederation_platform!]!
}

"aggregate fields of \"thefederation_platform\""
type thefederation_platform_aggregate_fields {
  avg: thefederation_platform_avg_fields
  count(columns: [thefederation_platform_select_column!], distinct: Boolean): Int!
  max: thefederation_platform_max_fields
  min: thefederation_platform_min_fields
  stddev: thefederation_platform_stddev_fields
  stddev_pop: thefederation_platform_stddev_pop_fields
  stddev_samp: thefederation_platform_stddev_samp_fields
  sum: thefederation_platform_sum_fields
  var_pop: thefederation_platform_var_pop_fields
  var_samp: thefederation_platform_var_samp_fields
  variance: thefederation_platform_variance_fields
}

"aggregate avg on columns"
type thefederation_platform_avg_fields {
  id: Float
}

"aggregate max on columns"
type thefederation_platform_max_fields {
  code: String
  created: timestamptz
  description: String
  display_name: String
  icon: String
  id: Int
  install_guide: String
  latest_version: String
  license: String
  name: String
  tagline: String
  updated: timestamptz
  uuid: uuid
  version_clean_style: String
  website: String
}

"aggregate min on columns"
type thefederation_platform_min_fields {
  code: String
  created: timestamptz
  description: String
  display_name: String
  icon: String
  id: Int
  install_guide: String
  latest_version: String
  license: String
  name: String
  tagline: String
  updated: timestamptz
  uuid: uuid
  version_clean_style: String
  website: String
}

"aggregate stddev on columns"
type thefederation_platform_stddev_fields {
  id: Float
}

"aggregate stddev_pop on columns"
type thefederation_platform_stddev_pop_fields {
  id: Float
}

"aggregate stddev_samp on columns"
type thefederation_platform_stddev_samp_fields {
  id: Float
}

"aggregate sum on columns"
type thefederation_platform_sum_fields {
  id: Int
}

"aggregate var_pop on columns"
type thefederation_platform_var_pop_fields {
  id: Float
}

"aggregate var_samp on columns"
type thefederation_platform_var_samp_fields {
  id: Float
}

"aggregate variance on columns"
type thefederation_platform_variance_fields {
  id: Float
}

"columns and relationships of \"thefederation_protocol\""
type thefederation_protocol {
  created: timestamptz!
  description: String!
  display_name: String!
  id: Int!
  name: String!
  "An array relationship"
  thefederation_node_protocols(
    "distinct select on columns"
    distinct_on: [thefederation_node_protocols_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_node_protocols_order_by!],
    "filter the rows returned"
    where: thefederation_node_protocols_bool_exp
  ): [thefederation_node_protocols!]!
  "An aggregate relationship"
  thefederation_node_protocols_aggregate(
    "distinct select on columns"
    distinct_on: [thefederation_node_protocols_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_node_protocols_order_by!],
    "filter the rows returned"
    where: thefederation_node_protocols_bool_exp
  ): thefederation_node_protocols_aggregate!
  "An array relationship"
  thefederation_stats(
    "distinct select on columns"
    distinct_on: [thefederation_stat_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_stat_order_by!],
    "filter the rows returned"
    where: thefederation_stat_bool_exp
  ): [thefederation_stat!]!
  "An aggregate relationship"
  thefederation_stats_aggregate(
    "distinct select on columns"
    distinct_on: [thefederation_stat_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_stat_order_by!],
    "filter the rows returned"
    where: thefederation_stat_bool_exp
  ): thefederation_stat_aggregate!
  updated: timestamptz!
  uuid: uuid!
  website: String!
}

"aggregated selection of \"thefederation_protocol\""
type thefederation_protocol_aggregate {
  aggregate: thefederation_protocol_aggregate_fields
  nodes: [thefederation_protocol!]!
}

"aggregate fields of \"thefederation_protocol\""
type thefederation_protocol_aggregate_fields {
  avg: thefederation_protocol_avg_fields
  count(columns: [thefederation_protocol_select_column!], distinct: Boolean): Int!
  max: thefederation_protocol_max_fields
  min: thefederation_protocol_min_fields
  stddev: thefederation_protocol_stddev_fields
  stddev_pop: thefederation_protocol_stddev_pop_fields
  stddev_samp: thefederation_protocol_stddev_samp_fields
  sum: thefederation_protocol_sum_fields
  var_pop: thefederation_protocol_var_pop_fields
  var_samp: thefederation_protocol_var_samp_fields
  variance: thefederation_protocol_variance_fields
}

"aggregate avg on columns"
type thefederation_protocol_avg_fields {
  id: Float
}

"aggregate max on columns"
type thefederation_protocol_max_fields {
  created: timestamptz
  description: String
  display_name: String
  id: Int
  name: String
  updated: timestamptz
  uuid: uuid
  website: String
}

"aggregate min on columns"
type thefederation_protocol_min_fields {
  created: timestamptz
  description: String
  display_name: String
  id: Int
  name: String
  updated: timestamptz
  uuid: uuid
  website: String
}

"aggregate stddev on columns"
type thefederation_protocol_stddev_fields {
  id: Float
}

"aggregate stddev_pop on columns"
type thefederation_protocol_stddev_pop_fields {
  id: Float
}

"aggregate stddev_samp on columns"
type thefederation_protocol_stddev_samp_fields {
  id: Float
}

"aggregate sum on columns"
type thefederation_protocol_sum_fields {
  id: Int
}

"aggregate var_pop on columns"
type thefederation_protocol_var_pop_fields {
  id: Float
}

"aggregate var_samp on columns"
type thefederation_protocol_var_samp_fields {
  id: Float
}

"aggregate variance on columns"
type thefederation_protocol_variance_fields {
  id: Float
}

"columns and relationships of \"thefederation_service\""
type thefederation_service {
  created: timestamptz!
  name: String!
  "An array relationship"
  thefederation_node_services(
    "distinct select on columns"
    distinct_on: [thefederation_node_services_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_node_services_order_by!],
    "filter the rows returned"
    where: thefederation_node_services_bool_exp
  ): [thefederation_node_services!]!
  "An aggregate relationship"
  thefederation_node_services_aggregate(
    "distinct select on columns"
    distinct_on: [thefederation_node_services_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [thefederation_node_services_order_by!],
    "filter the rows returned"
    where: thefederation_node_services_bool_exp
  ): thefederation_node_services_aggregate!
  updated: timestamptz!
}

"aggregated selection of \"thefederation_service\""
type thefederation_service_aggregate {
  aggregate: thefederation_service_aggregate_fields
  nodes: [thefederation_service!]!
}

"aggregate fields of \"thefederation_service\""
type thefederation_service_aggregate_fields {
  count(columns: [thefederation_service_select_column!], distinct: Boolean): Int!
  max: thefederation_service_max_fields
  min: thefederation_service_min_fields
}

"aggregate max on columns"
type thefederation_service_max_fields {
  created: timestamptz
  name: String
  updated: timestamptz
}

"aggregate min on columns"
type thefederation_service_min_fields {
  created: timestamptz
  name: String
  updated: timestamptz
}

"columns and relationships of \"thefederation_stat\""
type thefederation_stat {
  date: date!
  id: Int!
  local_comments: Int
  local_posts: Int
  node_id: Int
  platform_id: Int
  protocol_id: Int
  "An object relationship"
  thefederation_node: thefederation_node
  "An object relationship"
  thefederation_platform: thefederation_platform
  "An object relationship"
  thefederation_protocol: thefederation_protocol
  users_half_year: Int
  users_monthly: Int
  users_total: Int
  users_weekly: Int
}

"aggregated selection of \"thefederation_stat\""
type thefederation_stat_aggregate {
  aggregate: thefederation_stat_aggregate_fields
  nodes: [thefederation_stat!]!
}

"aggregate fields of \"thefederation_stat\""
type thefederation_stat_aggregate_fields {
  avg: thefederation_stat_avg_fields
  count(columns: [thefederation_stat_select_column!], distinct: Boolean): Int!
  max: thefederation_stat_max_fields
  min: thefederation_stat_min_fields
  stddev: thefederation_stat_stddev_fields
  stddev_pop: thefederation_stat_stddev_pop_fields
  stddev_samp: thefederation_stat_stddev_samp_fields
  sum: thefederation_stat_sum_fields
  var_pop: thefederation_stat_var_pop_fields
  var_samp: thefederation_stat_var_samp_fields
  variance: thefederation_stat_variance_fields
}

"aggregate avg on columns"
type thefederation_stat_avg_fields {
  id: Float
  local_comments: Float
  local_posts: Float
  node_id: Float
  platform_id: Float
  protocol_id: Float
  users_half_year: Float
  users_monthly: Float
  users_total: Float
  users_weekly: Float
}

"aggregate max on columns"
type thefederation_stat_max_fields {
  date: date
  id: Int
  local_comments: Int
  local_posts: Int
  node_id: Int
  platform_id: Int
  protocol_id: Int
  users_half_year: Int
  users_monthly: Int
  users_total: Int
  users_weekly: Int
}

"aggregate min on columns"
type thefederation_stat_min_fields {
  date: date
  id: Int
  local_comments: Int
  local_posts: Int
  node_id: Int
  platform_id: Int
  protocol_id: Int
  users_half_year: Int
  users_monthly: Int
  users_total: Int
  users_weekly: Int
}

"aggregate stddev on columns"
type thefederation_stat_stddev_fields {
  id: Float
  local_comments: Float
  local_posts: Float
  node_id: Float
  platform_id: Float
  protocol_id: Float
  users_half_year: Float
  users_monthly: Float
  users_total: Float
  users_weekly: Float
}

"aggregate stddev_pop on columns"
type thefederation_stat_stddev_pop_fields {
  id: Float
  local_comments: Float
  local_posts: Float
  node_id: Float
  platform_id: Float
  protocol_id: Float
  users_half_year: Float
  users_monthly: Float
  users_total: Float
  users_weekly: Float
}

"aggregate stddev_samp on columns"
type thefederation_stat_stddev_samp_fields {
  id: Float
  local_comments: Float
  local_posts: Float
  node_id: Float
  platform_id: Float
  protocol_id: Float
  users_half_year: Float
  users_monthly: Float
  users_total: Float
  users_weekly: Float
}

"aggregate sum on columns"
type thefederation_stat_sum_fields {
  id: Int
  local_comments: Int
  local_posts: Int
  node_id: Int
  platform_id: Int
  protocol_id: Int
  users_half_year: Int
  users_monthly: Int
  users_total: Int
  users_weekly: Int
}

"aggregate var_pop on columns"
type thefederation_stat_var_pop_fields {
  id: Float
  local_comments: Float
  local_posts: Float
  node_id: Float
  platform_id: Float
  protocol_id: Float
  users_half_year: Float
  users_monthly: Float
  users_total: Float
  users_weekly: Float
}

"aggregate var_samp on columns"
type thefederation_stat_var_samp_fields {
  id: Float
  local_comments: Float
  local_posts: Float
  node_id: Float
  platform_id: Float
  protocol_id: Float
  users_half_year: Float
  users_monthly: Float
  users_total: Float
  users_weekly: Float
}

"aggregate variance on columns"
type thefederation_stat_variance_fields {
  id: Float
  local_comments: Float
  local_posts: Float
  node_id: Float
  platform_id: Float
  protocol_id: Float
  users_half_year: Float
  users_monthly: Float
  users_total: Float
  users_weekly: Float
}

"select columns of table \"count_by_date\""
enum count_by_date_select_column {
  "column name"
  count
  "column name"
  date
}

"ordering argument of a cursor"
enum cursor_ordering {
  "ascending ordering of the cursor"
  ASC
  "descending ordering of the cursor"
  DESC
}

"select columns of table \"hosting_report_t\""
enum hosting_report_t_select_column {
  "column name"
  actives
  "column name"
  count
  "column name"
  country
  "column name"
  total
}

"column ordering options"
enum order_by {
  "in ascending order, nulls last"
  asc
  "in ascending order, nulls first"
  asc_nulls_first
  "in ascending order, nulls last"
  asc_nulls_last
  "in descending order, nulls first"
  desc
  "in descending order, nulls first"
  desc_nulls_first
  "in descending order, nulls last"
  desc_nulls_last
}

"select columns of table \"thefederation_node_protocols\""
enum thefederation_node_protocols_select_column {
  "column name"
  node_id
  "column name"
  protocol_id
}

"select columns of table \"thefederation_node\""
enum thefederation_node_select_column {
  "column name"
  blocked
  "column name"
  country
  "column name"
  created
  "column name"
  features
  "column name"
  hide_from_list
  "column name"
  host
  "column name"
  id
  "column name"
  ip
  "column name"
  last_success
  "column name"
  name
  "column name"
  open_signups
  "column name"
  organization_account
  "column name"
  organization_contact
  "column name"
  organization_name
  "column name"
  platform_id
  "column name"
  relay
  "column name"
  server_meta
  "column name"
  updated
  "column name"
  uuid
  "column name"
  version
}

"select \"thefederation_node_aggregate_bool_exp_bool_and_arguments_columns\" columns of table \"thefederation_node\""
enum thefederation_node_select_column_thefederation_node_aggregate_bool_exp_bool_and_arguments_columns {
  "column name"
  blocked
  "column name"
  hide_from_list
  "column name"
  open_signups
}

"select \"thefederation_node_aggregate_bool_exp_bool_or_arguments_columns\" columns of table \"thefederation_node\""
enum thefederation_node_select_column_thefederation_node_aggregate_bool_exp_bool_or_arguments_columns {
  "column name"
  blocked
  "column name"
  hide_from_list
  "column name"
  open_signups
}

"select columns of table \"thefederation_node_services\""
enum thefederation_node_services_select_column {
  "column name"
  node_id
  "column name"
  service_id
}

"select columns of table \"thefederation_platform\""
enum thefederation_platform_select_column {
  "column name"
  code
  "column name"
  created
  "column name"
  description
  "column name"
  display_name
  "column name"
  icon
  "column name"
  id
  "column name"
  install_guide
  "column name"
  latest_version
  "column name"
  license
  "column name"
  name
  "column name"
  tagline
  "column name"
  updated
  "column name"
  uuid
  "column name"
  version_clean_style
  "column name"
  website
}

"select columns of table \"thefederation_protocol\""
enum thefederation_protocol_select_column {
  "column name"
  created
  "column name"
  description
  "column name"
  display_name
  "column name"
  id
  "column name"
  name
  "column name"
  updated
  "column name"
  uuid
  "column name"
  website
}

"select columns of table \"thefederation_service\""
enum thefederation_service_select_column {
  "column name"
  created
  "column name"
  name
  "column name"
  updated
}

"select columns of table \"thefederation_stat\""
enum thefederation_stat_select_column {
  "column name"
  date
  "column name"
  id
  "column name"
  local_comments
  "column name"
  local_posts
  "column name"
  node_id
  "column name"
  platform_id
  "column name"
  protocol_id
  "column name"
  users_half_year
  "column name"
  users_monthly
  "column name"
  users_total
  "column name"
  users_weekly
}

scalar date

scalar float8

scalar inet

scalar jsonb

scalar timestamptz

scalar uuid

"Boolean expression to compare columns of type \"Boolean\". All fields are combined with logical 'AND'."
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'."
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  "does the column match the given case-insensitive pattern"
  _ilike: String
  _in: [String!]
  "does the column match the given POSIX regular expression, case insensitive"
  _iregex: String
  _is_null: Boolean
  "does the column match the given pattern"
  _like: String
  _lt: String
  _lte: String
  _neq: String
  "does the column NOT match the given case-insensitive pattern"
  _nilike: String
  _nin: [String!]
  "does the column NOT match the given POSIX regular expression, case insensitive"
  _niregex: String
  "does the column NOT match the given pattern"
  _nlike: String
  "does the column NOT match the given POSIX regular expression, case sensitive"
  _nregex: String
  "does the column NOT match the given SQL regular expression"
  _nsimilar: String
  "does the column match the given POSIX regular expression, case sensitive"
  _regex: String
  "does the column match the given SQL regular expression"
  _similar: String
}

input active_users_ratio_by_node_args {
  nodeid: Int
}

input active_users_ratio_by_platform_args {
  platformid: Int
}

"Boolean expression to filter rows from the table \"count_by_date\". All fields are combined with a logical 'AND'."
input count_by_date_bool_exp {
  _and: [count_by_date_bool_exp!]
  _not: count_by_date_bool_exp
  _or: [count_by_date_bool_exp!]
  count: float8_comparison_exp
  date: date_comparison_exp
}

"Ordering options when selecting data from \"count_by_date\"."
input count_by_date_order_by {
  count: order_by
  date: order_by
}

"Streaming cursor of the table \"count_by_date\""
input count_by_date_stream_cursor_input {
  "Stream column input with initial value"
  initial_value: count_by_date_stream_cursor_value_input!
  "cursor ordering"
  ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input count_by_date_stream_cursor_value_input {
  count: float8
  date: date
}

"Boolean expression to compare columns of type \"date\". All fields are combined with logical 'AND'."
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"Boolean expression to compare columns of type \"float8\". All fields are combined with logical 'AND'."
input float8_comparison_exp {
  _eq: float8
  _gt: float8
  _gte: float8
  _in: [float8!]
  _is_null: Boolean
  _lt: float8
  _lte: float8
  _neq: float8
  _nin: [float8!]
}

"Boolean expression to filter rows from the table \"hosting_report_t\". All fields are combined with a logical 'AND'."
input hosting_report_t_bool_exp {
  _and: [hosting_report_t_bool_exp!]
  _not: hosting_report_t_bool_exp
  _or: [hosting_report_t_bool_exp!]
  actives: Int_comparison_exp
  count: Int_comparison_exp
  country: String_comparison_exp
  total: Int_comparison_exp
}

"Ordering options when selecting data from \"hosting_report_t\"."
input hosting_report_t_order_by {
  actives: order_by
  count: order_by
  country: order_by
  total: order_by
}

"Streaming cursor of the table \"hosting_report_t\""
input hosting_report_t_stream_cursor_input {
  "Stream column input with initial value"
  initial_value: hosting_report_t_stream_cursor_value_input!
  "cursor ordering"
  ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input hosting_report_t_stream_cursor_value_input {
  actives: Int
  count: Int
  country: String
  total: Int
}

"Boolean expression to compare columns of type \"inet\". All fields are combined with logical 'AND'."
input inet_comparison_exp {
  _eq: inet
  _gt: inet
  _gte: inet
  _in: [inet!]
  _is_null: Boolean
  _lt: inet
  _lte: inet
  _neq: inet
  _nin: [inet!]
}

input jsonb_cast_exp {
  String: String_comparison_exp
}

"Boolean expression to compare columns of type \"jsonb\". All fields are combined with logical 'AND'."
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp
  "is the column contained in the given json value"
  _contained_in: jsonb
  "does the column contain the given json value at the top level"
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb
  "does the string exist as a top-level key in the column"
  _has_key: String
  "do all of these strings exist as top-level keys in the column"
  _has_keys_all: [String!]
  "do any of these strings exist as top-level keys in the column"
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

input node_count_per_date_by_platform_id_args {
  platformid: Int
}

input thefederation_node_aggregate_bool_exp {
  bool_and: thefederation_node_aggregate_bool_exp_bool_and
  bool_or: thefederation_node_aggregate_bool_exp_bool_or
  count: thefederation_node_aggregate_bool_exp_count
}

input thefederation_node_aggregate_bool_exp_bool_and {
  arguments: thefederation_node_select_column_thefederation_node_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: thefederation_node_bool_exp
  predicate: Boolean_comparison_exp!
}

input thefederation_node_aggregate_bool_exp_bool_or {
  arguments: thefederation_node_select_column_thefederation_node_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: thefederation_node_bool_exp
  predicate: Boolean_comparison_exp!
}

input thefederation_node_aggregate_bool_exp_count {
  arguments: [thefederation_node_select_column!]
  distinct: Boolean
  filter: thefederation_node_bool_exp
  predicate: Int_comparison_exp!
}

"order by aggregate values of table \"thefederation_node\""
input thefederation_node_aggregate_order_by {
  avg: thefederation_node_avg_order_by
  count: order_by
  max: thefederation_node_max_order_by
  min: thefederation_node_min_order_by
  stddev: thefederation_node_stddev_order_by
  stddev_pop: thefederation_node_stddev_pop_order_by
  stddev_samp: thefederation_node_stddev_samp_order_by
  sum: thefederation_node_sum_order_by
  var_pop: thefederation_node_var_pop_order_by
  var_samp: thefederation_node_var_samp_order_by
  variance: thefederation_node_variance_order_by
}

"order by avg() on columns of table \"thefederation_node\""
input thefederation_node_avg_order_by {
  id: order_by
  platform_id: order_by
}

"Boolean expression to filter rows from the table \"thefederation_node\". All fields are combined with a logical 'AND'."
input thefederation_node_bool_exp {
  _and: [thefederation_node_bool_exp!]
  _not: thefederation_node_bool_exp
  _or: [thefederation_node_bool_exp!]
  blocked: Boolean_comparison_exp
  country: String_comparison_exp
  created: timestamptz_comparison_exp
  features: jsonb_comparison_exp
  hide_from_list: Boolean_comparison_exp
  host: String_comparison_exp
  id: Int_comparison_exp
  ip: inet_comparison_exp
  last_success: timestamptz_comparison_exp
  name: String_comparison_exp
  open_signups: Boolean_comparison_exp
  organization_account: String_comparison_exp
  organization_contact: String_comparison_exp
  organization_name: String_comparison_exp
  platform_id: Int_comparison_exp
  relay: String_comparison_exp
  server_meta: jsonb_comparison_exp
  thefederation_node_services: thefederation_node_services_bool_exp
  thefederation_node_services_aggregate: thefederation_node_services_aggregate_bool_exp
  thefederation_platform: thefederation_platform_bool_exp
  thefederation_stats: thefederation_stat_bool_exp
  thefederation_stats_aggregate: thefederation_stat_aggregate_bool_exp
  updated: timestamptz_comparison_exp
  uuid: uuid_comparison_exp
  version: String_comparison_exp
}

"order by max() on columns of table \"thefederation_node\""
input thefederation_node_max_order_by {
  country: order_by
  created: order_by
  host: order_by
  id: order_by
  last_success: order_by
  name: order_by
  organization_account: order_by
  organization_contact: order_by
  organization_name: order_by
  platform_id: order_by
  relay: order_by
  updated: order_by
  uuid: order_by
  version: order_by
}

"order by min() on columns of table \"thefederation_node\""
input thefederation_node_min_order_by {
  country: order_by
  created: order_by
  host: order_by
  id: order_by
  last_success: order_by
  name: order_by
  organization_account: order_by
  organization_contact: order_by
  organization_name: order_by
  platform_id: order_by
  relay: order_by
  updated: order_by
  uuid: order_by
  version: order_by
}

"Ordering options when selecting data from \"thefederation_node\"."
input thefederation_node_order_by {
  blocked: order_by
  country: order_by
  created: order_by
  features: order_by
  hide_from_list: order_by
  host: order_by
  id: order_by
  ip: order_by
  last_success: order_by
  name: order_by
  open_signups: order_by
  organization_account: order_by
  organization_contact: order_by
  organization_name: order_by
  platform_id: order_by
  relay: order_by
  server_meta: order_by
  thefederation_node_services_aggregate: thefederation_node_services_aggregate_order_by
  thefederation_platform: thefederation_platform_order_by
  thefederation_stats_aggregate: thefederation_stat_aggregate_order_by
  updated: order_by
  uuid: order_by
  version: order_by
}

input thefederation_node_protocols_aggregate_bool_exp {
  count: thefederation_node_protocols_aggregate_bool_exp_count
}

input thefederation_node_protocols_aggregate_bool_exp_count {
  arguments: [thefederation_node_protocols_select_column!]
  distinct: Boolean
  filter: thefederation_node_protocols_bool_exp
  predicate: Int_comparison_exp!
}

"order by aggregate values of table \"thefederation_node_protocols\""
input thefederation_node_protocols_aggregate_order_by {
  avg: thefederation_node_protocols_avg_order_by
  count: order_by
  max: thefederation_node_protocols_max_order_by
  min: thefederation_node_protocols_min_order_by
  stddev: thefederation_node_protocols_stddev_order_by
  stddev_pop: thefederation_node_protocols_stddev_pop_order_by
  stddev_samp: thefederation_node_protocols_stddev_samp_order_by
  sum: thefederation_node_protocols_sum_order_by
  var_pop: thefederation_node_protocols_var_pop_order_by
  var_samp: thefederation_node_protocols_var_samp_order_by
  variance: thefederation_node_protocols_variance_order_by
}

"order by avg() on columns of table \"thefederation_node_protocols\""
input thefederation_node_protocols_avg_order_by {
  node_id: order_by
  protocol_id: order_by
}

"Boolean expression to filter rows from the table \"thefederation_node_protocols\". All fields are combined with a logical 'AND'."
input thefederation_node_protocols_bool_exp {
  _and: [thefederation_node_protocols_bool_exp!]
  _not: thefederation_node_protocols_bool_exp
  _or: [thefederation_node_protocols_bool_exp!]
  node_id: Int_comparison_exp
  protocol_id: Int_comparison_exp
  thefederation_node: thefederation_node_bool_exp
}

"order by max() on columns of table \"thefederation_node_protocols\""
input thefederation_node_protocols_max_order_by {
  node_id: order_by
  protocol_id: order_by
}

"order by min() on columns of table \"thefederation_node_protocols\""
input thefederation_node_protocols_min_order_by {
  node_id: order_by
  protocol_id: order_by
}

"Ordering options when selecting data from \"thefederation_node_protocols\"."
input thefederation_node_protocols_order_by {
  node_id: order_by
  protocol_id: order_by
  thefederation_node: thefederation_node_order_by
}

"order by stddev() on columns of table \"thefederation_node_protocols\""
input thefederation_node_protocols_stddev_order_by {
  node_id: order_by
  protocol_id: order_by
}

"order by stddev_pop() on columns of table \"thefederation_node_protocols\""
input thefederation_node_protocols_stddev_pop_order_by {
  node_id: order_by
  protocol_id: order_by
}

"order by stddev_samp() on columns of table \"thefederation_node_protocols\""
input thefederation_node_protocols_stddev_samp_order_by {
  node_id: order_by
  protocol_id: order_by
}

"Streaming cursor of the table \"thefederation_node_protocols\""
input thefederation_node_protocols_stream_cursor_input {
  "Stream column input with initial value"
  initial_value: thefederation_node_protocols_stream_cursor_value_input!
  "cursor ordering"
  ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input thefederation_node_protocols_stream_cursor_value_input {
  node_id: Int
  protocol_id: Int
}

"order by sum() on columns of table \"thefederation_node_protocols\""
input thefederation_node_protocols_sum_order_by {
  node_id: order_by
  protocol_id: order_by
}

"order by var_pop() on columns of table \"thefederation_node_protocols\""
input thefederation_node_protocols_var_pop_order_by {
  node_id: order_by
  protocol_id: order_by
}

"order by var_samp() on columns of table \"thefederation_node_protocols\""
input thefederation_node_protocols_var_samp_order_by {
  node_id: order_by
  protocol_id: order_by
}

"order by variance() on columns of table \"thefederation_node_protocols\""
input thefederation_node_protocols_variance_order_by {
  node_id: order_by
  protocol_id: order_by
}

input thefederation_node_services_aggregate_bool_exp {
  count: thefederation_node_services_aggregate_bool_exp_count
}

input thefederation_node_services_aggregate_bool_exp_count {
  arguments: [thefederation_node_services_select_column!]
  distinct: Boolean
  filter: thefederation_node_services_bool_exp
  predicate: Int_comparison_exp!
}

"order by aggregate values of table \"thefederation_node_services\""
input thefederation_node_services_aggregate_order_by {
  avg: thefederation_node_services_avg_order_by
  count: order_by
  max: thefederation_node_services_max_order_by
  min: thefederation_node_services_min_order_by
  stddev: thefederation_node_services_stddev_order_by
  stddev_pop: thefederation_node_services_stddev_pop_order_by
  stddev_samp: thefederation_node_services_stddev_samp_order_by
  sum: thefederation_node_services_sum_order_by
  var_pop: thefederation_node_services_var_pop_order_by
  var_samp: thefederation_node_services_var_samp_order_by
  variance: thefederation_node_services_variance_order_by
}

"order by avg() on columns of table \"thefederation_node_services\""
input thefederation_node_services_avg_order_by {
  node_id: order_by
  service_id: order_by
}

"Boolean expression to filter rows from the table \"thefederation_node_services\". All fields are combined with a logical 'AND'."
input thefederation_node_services_bool_exp {
  _and: [thefederation_node_services_bool_exp!]
  _not: thefederation_node_services_bool_exp
  _or: [thefederation_node_services_bool_exp!]
  node_id: Int_comparison_exp
  service_id: Int_comparison_exp
  thefederation_node: thefederation_node_bool_exp
  thefederation_service: thefederation_service_bool_exp
}

"order by max() on columns of table \"thefederation_node_services\""
input thefederation_node_services_max_order_by {
  node_id: order_by
  service_id: order_by
}

"order by min() on columns of table \"thefederation_node_services\""
input thefederation_node_services_min_order_by {
  node_id: order_by
  service_id: order_by
}

"Ordering options when selecting data from \"thefederation_node_services\"."
input thefederation_node_services_order_by {
  node_id: order_by
  service_id: order_by
  thefederation_node: thefederation_node_order_by
  thefederation_service: thefederation_service_order_by
}

"order by stddev() on columns of table \"thefederation_node_services\""
input thefederation_node_services_stddev_order_by {
  node_id: order_by
  service_id: order_by
}

"order by stddev_pop() on columns of table \"thefederation_node_services\""
input thefederation_node_services_stddev_pop_order_by {
  node_id: order_by
  service_id: order_by
}

"order by stddev_samp() on columns of table \"thefederation_node_services\""
input thefederation_node_services_stddev_samp_order_by {
  node_id: order_by
  service_id: order_by
}

"Streaming cursor of the table \"thefederation_node_services\""
input thefederation_node_services_stream_cursor_input {
  "Stream column input with initial value"
  initial_value: thefederation_node_services_stream_cursor_value_input!
  "cursor ordering"
  ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input thefederation_node_services_stream_cursor_value_input {
  node_id: Int
  service_id: Int
}

"order by sum() on columns of table \"thefederation_node_services\""
input thefederation_node_services_sum_order_by {
  node_id: order_by
  service_id: order_by
}

"order by var_pop() on columns of table \"thefederation_node_services\""
input thefederation_node_services_var_pop_order_by {
  node_id: order_by
  service_id: order_by
}

"order by var_samp() on columns of table \"thefederation_node_services\""
input thefederation_node_services_var_samp_order_by {
  node_id: order_by
  service_id: order_by
}

"order by variance() on columns of table \"thefederation_node_services\""
input thefederation_node_services_variance_order_by {
  node_id: order_by
  service_id: order_by
}

"order by stddev() on columns of table \"thefederation_node\""
input thefederation_node_stddev_order_by {
  id: order_by
  platform_id: order_by
}

"order by stddev_pop() on columns of table \"thefederation_node\""
input thefederation_node_stddev_pop_order_by {
  id: order_by
  platform_id: order_by
}

"order by stddev_samp() on columns of table \"thefederation_node\""
input thefederation_node_stddev_samp_order_by {
  id: order_by
  platform_id: order_by
}

"Streaming cursor of the table \"thefederation_node\""
input thefederation_node_stream_cursor_input {
  "Stream column input with initial value"
  initial_value: thefederation_node_stream_cursor_value_input!
  "cursor ordering"
  ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input thefederation_node_stream_cursor_value_input {
  blocked: Boolean
  country: String
  created: timestamptz
  features: jsonb
  hide_from_list: Boolean
  host: String
  id: Int
  ip: inet
  last_success: timestamptz
  name: String
  open_signups: Boolean
  organization_account: String
  organization_contact: String
  organization_name: String
  platform_id: Int
  relay: String
  server_meta: jsonb
  updated: timestamptz
  uuid: uuid
  version: String
}

"order by sum() on columns of table \"thefederation_node\""
input thefederation_node_sum_order_by {
  id: order_by
  platform_id: order_by
}

"order by var_pop() on columns of table \"thefederation_node\""
input thefederation_node_var_pop_order_by {
  id: order_by
  platform_id: order_by
}

"order by var_samp() on columns of table \"thefederation_node\""
input thefederation_node_var_samp_order_by {
  id: order_by
  platform_id: order_by
}

"order by variance() on columns of table \"thefederation_node\""
input thefederation_node_variance_order_by {
  id: order_by
  platform_id: order_by
}

"Boolean expression to filter rows from the table \"thefederation_platform\". All fields are combined with a logical 'AND'."
input thefederation_platform_bool_exp {
  _and: [thefederation_platform_bool_exp!]
  _not: thefederation_platform_bool_exp
  _or: [thefederation_platform_bool_exp!]
  code: String_comparison_exp
  created: timestamptz_comparison_exp
  description: String_comparison_exp
  display_name: String_comparison_exp
  icon: String_comparison_exp
  id: Int_comparison_exp
  install_guide: String_comparison_exp
  latest_version: String_comparison_exp
  license: String_comparison_exp
  name: String_comparison_exp
  tagline: String_comparison_exp
  thefederation_nodes: thefederation_node_bool_exp
  thefederation_nodes_aggregate: thefederation_node_aggregate_bool_exp
  thefederation_stats: thefederation_stat_bool_exp
  thefederation_stats_aggregate: thefederation_stat_aggregate_bool_exp
  updated: timestamptz_comparison_exp
  uuid: uuid_comparison_exp
  version_clean_style: String_comparison_exp
  website: String_comparison_exp
}

"Ordering options when selecting data from \"thefederation_platform\"."
input thefederation_platform_order_by {
  code: order_by
  created: order_by
  description: order_by
  display_name: order_by
  icon: order_by
  id: order_by
  install_guide: order_by
  latest_version: order_by
  license: order_by
  name: order_by
  tagline: order_by
  thefederation_nodes_aggregate: thefederation_node_aggregate_order_by
  thefederation_stats_aggregate: thefederation_stat_aggregate_order_by
  updated: order_by
  uuid: order_by
  version_clean_style: order_by
  website: order_by
}

"Streaming cursor of the table \"thefederation_platform\""
input thefederation_platform_stream_cursor_input {
  "Stream column input with initial value"
  initial_value: thefederation_platform_stream_cursor_value_input!
  "cursor ordering"
  ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input thefederation_platform_stream_cursor_value_input {
  code: String
  created: timestamptz
  description: String
  display_name: String
  icon: String
  id: Int
  install_guide: String
  latest_version: String
  license: String
  name: String
  tagline: String
  updated: timestamptz
  uuid: uuid
  version_clean_style: String
  website: String
}

"Boolean expression to filter rows from the table \"thefederation_protocol\". All fields are combined with a logical 'AND'."
input thefederation_protocol_bool_exp {
  _and: [thefederation_protocol_bool_exp!]
  _not: thefederation_protocol_bool_exp
  _or: [thefederation_protocol_bool_exp!]
  created: timestamptz_comparison_exp
  description: String_comparison_exp
  display_name: String_comparison_exp
  id: Int_comparison_exp
  name: String_comparison_exp
  thefederation_node_protocols: thefederation_node_protocols_bool_exp
  thefederation_node_protocols_aggregate: thefederation_node_protocols_aggregate_bool_exp
  thefederation_stats: thefederation_stat_bool_exp
  thefederation_stats_aggregate: thefederation_stat_aggregate_bool_exp
  updated: timestamptz_comparison_exp
  uuid: uuid_comparison_exp
  website: String_comparison_exp
}

"Ordering options when selecting data from \"thefederation_protocol\"."
input thefederation_protocol_order_by {
  created: order_by
  description: order_by
  display_name: order_by
  id: order_by
  name: order_by
  thefederation_node_protocols_aggregate: thefederation_node_protocols_aggregate_order_by
  thefederation_stats_aggregate: thefederation_stat_aggregate_order_by
  updated: order_by
  uuid: order_by
  website: order_by
}

"Streaming cursor of the table \"thefederation_protocol\""
input thefederation_protocol_stream_cursor_input {
  "Stream column input with initial value"
  initial_value: thefederation_protocol_stream_cursor_value_input!
  "cursor ordering"
  ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input thefederation_protocol_stream_cursor_value_input {
  created: timestamptz
  description: String
  display_name: String
  id: Int
  name: String
  updated: timestamptz
  uuid: uuid
  website: String
}

"Boolean expression to filter rows from the table \"thefederation_service\". All fields are combined with a logical 'AND'."
input thefederation_service_bool_exp {
  _and: [thefederation_service_bool_exp!]
  _not: thefederation_service_bool_exp
  _or: [thefederation_service_bool_exp!]
  created: timestamptz_comparison_exp
  name: String_comparison_exp
  thefederation_node_services: thefederation_node_services_bool_exp
  thefederation_node_services_aggregate: thefederation_node_services_aggregate_bool_exp
  updated: timestamptz_comparison_exp
}

"Ordering options when selecting data from \"thefederation_service\"."
input thefederation_service_order_by {
  created: order_by
  name: order_by
  thefederation_node_services_aggregate: thefederation_node_services_aggregate_order_by
  updated: order_by
}

"Streaming cursor of the table \"thefederation_service\""
input thefederation_service_stream_cursor_input {
  "Stream column input with initial value"
  initial_value: thefederation_service_stream_cursor_value_input!
  "cursor ordering"
  ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input thefederation_service_stream_cursor_value_input {
  created: timestamptz
  name: String
  updated: timestamptz
}

input thefederation_stat_aggregate_bool_exp {
  count: thefederation_stat_aggregate_bool_exp_count
}

input thefederation_stat_aggregate_bool_exp_count {
  arguments: [thefederation_stat_select_column!]
  distinct: Boolean
  filter: thefederation_stat_bool_exp
  predicate: Int_comparison_exp!
}

"order by aggregate values of table \"thefederation_stat\""
input thefederation_stat_aggregate_order_by {
  avg: thefederation_stat_avg_order_by
  count: order_by
  max: thefederation_stat_max_order_by
  min: thefederation_stat_min_order_by
  stddev: thefederation_stat_stddev_order_by
  stddev_pop: thefederation_stat_stddev_pop_order_by
  stddev_samp: thefederation_stat_stddev_samp_order_by
  sum: thefederation_stat_sum_order_by
  var_pop: thefederation_stat_var_pop_order_by
  var_samp: thefederation_stat_var_samp_order_by
  variance: thefederation_stat_variance_order_by
}

"order by avg() on columns of table \"thefederation_stat\""
input thefederation_stat_avg_order_by {
  id: order_by
  local_comments: order_by
  local_posts: order_by
  node_id: order_by
  platform_id: order_by
  protocol_id: order_by
  users_half_year: order_by
  users_monthly: order_by
  users_total: order_by
  users_weekly: order_by
}

"Boolean expression to filter rows from the table \"thefederation_stat\". All fields are combined with a logical 'AND'."
input thefederation_stat_bool_exp {
  _and: [thefederation_stat_bool_exp!]
  _not: thefederation_stat_bool_exp
  _or: [thefederation_stat_bool_exp!]
  date: date_comparison_exp
  id: Int_comparison_exp
  local_comments: Int_comparison_exp
  local_posts: Int_comparison_exp
  node_id: Int_comparison_exp
  platform_id: Int_comparison_exp
  protocol_id: Int_comparison_exp
  thefederation_node: thefederation_node_bool_exp
  thefederation_platform: thefederation_platform_bool_exp
  thefederation_protocol: thefederation_protocol_bool_exp
  users_half_year: Int_comparison_exp
  users_monthly: Int_comparison_exp
  users_total: Int_comparison_exp
  users_weekly: Int_comparison_exp
}

"order by max() on columns of table \"thefederation_stat\""
input thefederation_stat_max_order_by {
  date: order_by
  id: order_by
  local_comments: order_by
  local_posts: order_by
  node_id: order_by
  platform_id: order_by
  protocol_id: order_by
  users_half_year: order_by
  users_monthly: order_by
  users_total: order_by
  users_weekly: order_by
}

"order by min() on columns of table \"thefederation_stat\""
input thefederation_stat_min_order_by {
  date: order_by
  id: order_by
  local_comments: order_by
  local_posts: order_by
  node_id: order_by
  platform_id: order_by
  protocol_id: order_by
  users_half_year: order_by
  users_monthly: order_by
  users_total: order_by
  users_weekly: order_by
}

"Ordering options when selecting data from \"thefederation_stat\"."
input thefederation_stat_order_by {
  date: order_by
  id: order_by
  local_comments: order_by
  local_posts: order_by
  node_id: order_by
  platform_id: order_by
  protocol_id: order_by
  thefederation_node: thefederation_node_order_by
  thefederation_platform: thefederation_platform_order_by
  thefederation_protocol: thefederation_protocol_order_by
  users_half_year: order_by
  users_monthly: order_by
  users_total: order_by
  users_weekly: order_by
}

"order by stddev() on columns of table \"thefederation_stat\""
input thefederation_stat_stddev_order_by {
  id: order_by
  local_comments: order_by
  local_posts: order_by
  node_id: order_by
  platform_id: order_by
  protocol_id: order_by
  users_half_year: order_by
  users_monthly: order_by
  users_total: order_by
  users_weekly: order_by
}

"order by stddev_pop() on columns of table \"thefederation_stat\""
input thefederation_stat_stddev_pop_order_by {
  id: order_by
  local_comments: order_by
  local_posts: order_by
  node_id: order_by
  platform_id: order_by
  protocol_id: order_by
  users_half_year: order_by
  users_monthly: order_by
  users_total: order_by
  users_weekly: order_by
}

"order by stddev_samp() on columns of table \"thefederation_stat\""
input thefederation_stat_stddev_samp_order_by {
  id: order_by
  local_comments: order_by
  local_posts: order_by
  node_id: order_by
  platform_id: order_by
  protocol_id: order_by
  users_half_year: order_by
  users_monthly: order_by
  users_total: order_by
  users_weekly: order_by
}

"Streaming cursor of the table \"thefederation_stat\""
input thefederation_stat_stream_cursor_input {
  "Stream column input with initial value"
  initial_value: thefederation_stat_stream_cursor_value_input!
  "cursor ordering"
  ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input thefederation_stat_stream_cursor_value_input {
  date: date
  id: Int
  local_comments: Int
  local_posts: Int
  node_id: Int
  platform_id: Int
  protocol_id: Int
  users_half_year: Int
  users_monthly: Int
  users_total: Int
  users_weekly: Int
}

"order by sum() on columns of table \"thefederation_stat\""
input thefederation_stat_sum_order_by {
  id: order_by
  local_comments: order_by
  local_posts: order_by
  node_id: order_by
  platform_id: order_by
  protocol_id: order_by
  users_half_year: order_by
  users_monthly: order_by
  users_total: order_by
  users_weekly: order_by
}

"order by var_pop() on columns of table \"thefederation_stat\""
input thefederation_stat_var_pop_order_by {
  id: order_by
  local_comments: order_by
  local_posts: order_by
  node_id: order_by
  platform_id: order_by
  protocol_id: order_by
  users_half_year: order_by
  users_monthly: order_by
  users_total: order_by
  users_weekly: order_by
}

"order by var_samp() on columns of table \"thefederation_stat\""
input thefederation_stat_var_samp_order_by {
  id: order_by
  local_comments: order_by
  local_posts: order_by
  node_id: order_by
  platform_id: order_by
  protocol_id: order_by
  users_half_year: order_by
  users_monthly: order_by
  users_total: order_by
  users_weekly: order_by
}

"order by variance() on columns of table \"thefederation_stat\""
input thefederation_stat_variance_order_by {
  id: order_by
  local_comments: order_by
  local_posts: order_by
  node_id: order_by
  platform_id: order_by
  protocol_id: order_by
  users_half_year: order_by
  users_monthly: order_by
  users_total: order_by
  users_weekly: order_by
}

"Boolean expression to compare columns of type \"timestamptz\". All fields are combined with logical 'AND'."
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

input users_per_node_by_platform_args {
  platformid: Int
}

"Boolean expression to compare columns of type \"uuid\". All fields are combined with logical 'AND'."
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}
